<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;
use App\Domain\RssFeed\BusinessLogic\Entities\RssFeed;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class CreateRssFeedTest extends TestCase
{
    use DatabaseTransactions;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testCreateFeed()
    {
        $feedData = [
          'name' => 'Test Feed',
          'url' => 'http://rss.feed'
        ];

        $this->post('api/rss-feeds', $feedData, ['Accept' => 'application/json'])
            ->assertStatus(200);
        $this->assertDatabaseHas('rss_feeds', $feedData);
    }

    public function testCreateFeedNoNameValidation()
    {
        $feedData = [
            'name' => '',
            'url' => 'http://rss.feed'
        ];

        $this->post('api/rss-feeds', $feedData, ['Accept' => 'application/json'])
            ->assertStatus(422)
            ->assertJsonFragment(['errors' => ['name' => ['The name field is required.']]]);
    }

    public function testCreateFeedUrlValidation()
    {
        $feedData = [
            'name' => 'Test Rss',
            'url' => 'httprss'
        ];

        $this->post('api/rss-feeds', $feedData, ['Accept' => 'application/json'])
            ->assertStatus(422)
            ->assertJsonFragment(['errors' => ['url' => ['The url format is invalid.']]]);
    }
}
